= Layout

== VBox and HBox
Author: Carl Walker

Layout in JavaFX begins with selecting the right container controls.  The two layout controls I use most often are VBox and HBox.  VBox is a container that arranges its children in a vertical stack.  HBox arranges its children in a horizontal row.  The power of these two controls comes from wrapping them and setting a few key properties: alignment, hgrow, and vgrow.

This article will demonstrate these controls by through a sample project.   A mockup of the project shows a UI with the following:

* A row of top controls containing a Refresh Button and a Sign Out Hyperlink,
* A TableView that will grow to take up the extra vertical space, and
* A Close Button.

The UI also features a Separator which divides the top part of the screen with what may become a standard lower panel (Save Button, Cancel Button, etc) for the application.

image::images/layout/vboxandhboxapp_mockup.png[title="Mockup"]

=== Structure

A VBox is the outermost container "vbox".  This will be the Parent provided to the Scene.  Simply putting UI controls in this VBox will allow the controls -- most notably the TableView -- to stretch to fit the available horizontal space.  For the top controls, the Refresh Button and the Sign Out Link, I wrap those in an HBox.  Similary, I wrap the bottom Close Button in an HBox, allowing for additional Buttons.

[source,java]
----
VBox vbox = new VBox();

Button btnRefresh = new Button("Refresh");

HBox topRightControls = new HBox();
topRightControls.getChildren().add( signOutLink );

topControls.getChildren().addAll( btnRefresh, topRightControls );

TableView<Customer> tblCustomers = new TableView<>();
Separator sep = new Separator();

HBox bottomControls = new HBox();

Button btnClose = new Button("Close");

bottomControls.getChildren().add( btnClose );

vbox.getChildren().addAll(
        topControls,
        tblCustomers,
        sep,
        bottomControls
);
----

This picture shows the mockup broken down by container.  The Parent VBox is the outermost blue rectangle.  The HBoxes are the inner rectangles (red and green).

image::images/layout/vboxandhboxapp_brokendown.png[title="Mockup Broken Down"]

=== Alignment and Hgrow

The Refresh Button is aligned to the left while the Sign Out Hyperlink is aligned to the right.  This is accomplished using two HBoxes.  topControls is an HBox that contains the Refresh Button and also contains an HBox with the Sign Out Hyperlink.  As the screen grows wider, the Sign Out Hyperlink will be pulled to the right while the Refresh Button will retain its left alignment.

Alignment is the property that tells a container where to position a control.  topControls sets alignment to the BOTTOM_LEFT.  topRightControls sets alignment to the BOTTOM_RIGHT.  "BOTTOM" makes sure that the baseline of the text "Refresh" matches the baseline of the text "Sign Out".

In order to make the Sign Out Hyperlink move to the right when the screen gets wider, Priority.ALWAYS is needed.  This is a cue to the JavaFX to widen topRightControls.  Otherwise, topControls will keep the space and topRightControls will appear to the left.  Sign Out Hyperlink still would be right-aligned but in a narrower container.

Notice that setHgrow() is a static method and neither invoked on the topControls HBox nor on itself, topRightControls.  This is a facet of the JavaFX API that can be confusing because most of the API sets properties via setters on objects.

[source,java]
----
topControls.setAlignment( Pos.BOTTOM_LEFT );

HBox.setHgrow(topRightControls, Priority.ALWAYS );
topRightControls.setAlignment( Pos.BOTTOM_RIGHT );
----

Close Button is wrapped in an HBox and positioned using the BOTTOM_RIGHT priority.

[source,java]
----
bottomControls.setAlignment(Pos.BOTTOM_RIGHT );
----

=== Vgrow

Since the outermost containiner is VBox, the child TableView will expand to take up extra horizontal space when the window is widened.  However, vertically reisizing the window will produce a gap at the bottom of the screen.  The VBox does not automatically resize any of its children.  As with the topRightControls HBox, a grow indicator can be set.  In the case of the HBox, this was a horizontal resizing instruction setHgrow().  For the TableView container VBox, this will be setVgrow().

[source,java]
----
VBox.setVgrow( tblCustomers, Priority.ALWAYS );
----

=== Margin

There are a few ways to space out UI controls.  This article uses the margin property on several of the containers to add whitespace around the controls.  These are set individually rather than using a spacing on the VBox so that the Separator will span the entire width.

[source,java]
----
VBox.setMargin( topControls, new Insets(10.0d) );
VBox.setMargin( tblCustomers, new Insets(0.0d, 10.0d, 10.0d, 10.0d) );
VBox.setMargin( bottomControls, new Insets(10.0d) );
----

The Insets used by tblCustomers omits any top spacing to keep the spacing even.  JavaFX does not consolidate whitespace as in web design.  If the top Inset were set to 10.0d for the TableView, the distance between the top controls and the TableView would be twice as wide as the distance between any of the other controls.

Notice that these are static methods like the Priority.

This picture shows the application when run in its initial 800x600 size.

image::images/layout/vboxandhboxapp_screenshot.png[title="Screenshot"]

This image shows the application resized to a smaller height and width.

image::images/layout/vboxandhboxapp_screenshot_sm.png[title="Screenshot (Small)"]

=== Select the Right Containers

The philosophy of JavaFX layout is the same as the philosophy of Swing.  Select the right container for the task at hand.  This article presented the two most versatile containers: VBox and HBox.  By setting properties like alignment, hgrow, and vgrow, you can build incredibly complex layouts through nesting.  These are the containers I use the most and often are the only containers that I need.

=== Complete Code

The code can be tested in a pair of .java files.  There is a POJO for the Customer object used by the TableView

[source,java]
----
public class Customer {

    private String firstName;
    private String lastName;

    public Customer(String firstName,
                    String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
----

This is the completed JavaFX Application subclass and main.

[source,java]
----
public class VBoxAndHBoxApp extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {

        VBox vbox = new VBox();

        HBox topControls = new HBox();
        VBox.setMargin( topControls, new Insets(10.0d) );
        topControls.setAlignment( Pos.BOTTOM_LEFT );

        Button btnRefresh = new Button("Refresh");

        HBox topRightControls = new HBox();
        HBox.setHgrow(topRightControls, Priority.ALWAYS );
        topRightControls.setAlignment( Pos.BOTTOM_RIGHT );
        Hyperlink signOutLink = new Hyperlink("Sign Out");
        topRightControls.getChildren().add( signOutLink );

        topControls.getChildren().addAll( btnRefresh, topRightControls );

        TableView<Customer> tblCustomers = new TableView<>();
        tblCustomers.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        VBox.setMargin( tblCustomers, new Insets(0.0d, 10.0d, 10.0d, 10.0d) );
        VBox.setVgrow( tblCustomers, Priority.ALWAYS );

        TableColumn<Customer, String> lastNameCol = new TableColumn<>("Last Name");
        lastNameCol.setCellValueFactory(new PropertyValueFactory<>("lastName"));

        TableColumn<Customer, String> firstNameCol = new TableColumn<>("First Name");
        firstNameCol.setCellValueFactory(new PropertyValueFactory<>("firstName"));

        tblCustomers.getColumns().addAll( lastNameCol, firstNameCol );

        Separator sep = new Separator();

        HBox bottomControls = new HBox();
        bottomControls.setAlignment(Pos.BOTTOM_RIGHT );
        VBox.setMargin( bottomControls, new Insets(10.0d) );

        Button btnClose = new Button("Close");

        bottomControls.getChildren().add( btnClose );

        vbox.getChildren().addAll(
                topControls,
                tblCustomers,
                sep,
                bottomControls
        );

        Scene scene = new Scene(vbox );

        primaryStage.setScene( scene );
        primaryStage.setWidth( 800 );
        primaryStage.setHeight( 600 );
        primaryStage.setTitle("VBox and HBox App");
        primaryStage.setOnShown( (evt) -> loadTable(tblCustomers) );
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    private void loadTable(TableView<Customer> tblCustomers) {
        tblCustomers.getItems().add(new Customer("George", "Washington"));
        tblCustomers.getItems().add(new Customer("Abe", "Lincoln"));
        tblCustomers.getItems().add(new Customer("Thomas", "Jefferson"));
    }
}
----

== Absolute Positioning with Pane
Author: Carl Walker

Containers like VBox or BorderPane align and distribute their children.  The superclass Pane is also a container, but does not impose an order on its children.  The children position themselves through properties like x, centerX, and layoutX.  This is called absolute positioning and it is a technique to place a Shape or a Node at a certain location on the screen.

This screenshot shows an About View.  The About View contains a Hyperlink in the middle of the screen "About this App".  The About View uses several JavaFX shapes to form a design which is cropped to appear like a business card.

image::images/layout/paneapp_about_view.png[title="Screenshot of About View in PaneApp"]

=== Pane Size

Unlike most containers, Pane resizes to fit its contents and not the other way around.  This picture is a screenshot from Scenic View taken prior to adding the lower-right Arc.  The Pane is the yellow highlighted area.  Notice that it does not take up the full Stage.

image::images/layout/paneapp_pane_size_scenicview.png[title="Scenic View Highlighting Partially Built Screen"]

This is a screenshot taken after the lower-right Arc was added.  This Arc was placed closer to the bottom-right edge of the Stage.  This forces the Pane to stretch to accommodate the expanded contents.

image::images/layout/paneapp_scenicview_full_stage.png[title="Scenic View Highlighting Expanded Pane"]

=== The Pane

The outermost container of the About View is a VBox whose sole contents are the Pane.  The VBox is used to fit the entire Stage and provides a background.

[source,java]
----
VBox vbox = new VBox();
vbox.setPadding( new Insets( 10 ) );
vbox.setBackground( 
    new Background(
        new BackgroundFill(Color.BLACK, new CornerRadii(0), new Insets(0))
        ));

Pane p = new Pane();
----

=== The Shapes

In the upper left of the screen, there is a group of 4 Arcs and 1 Circle.  This code positions largeArc at (0,0) through the centerX and centerY arguments in the Arc constructor.  Notice that backgroundArc is also positioned at (0,0) and appears underneath largeArc.  Pane does not attempt to deconflict overlapping shapes and in this case, overlapping is what is wanted.  smArc1 is placed at (0,160) which is down on the Y axis.  smArc2 is positioned at (160,0) which is right on the X axis.  smCircle is positioned at the same distance as smArc1 and smArc2, but at a 45 degree angle.

[source,java]
----
Arc largeArc = new Arc(0, 0, 100, 100, 270, 90);
largeArc.setType(ArcType.ROUND);

Arc backgroundArc = new Arc(0, 0, 160, 160, 270, 90 );
backgroundArc.setType( ArcType.ROUND );

Arc smArc1 = new Arc( 0, 160, 30, 30, 270, 180);
smArc1.setType(ArcType.ROUND);

Circle smCircle = new Circle(160/Math.sqrt(2.0), 160/Math.sqrt(2.0), 30,Color.web("0xF2A444"));

Arc smArc2 = new Arc( 160, 0, 30, 30, 180, 180);
smArc2.setType(ArcType.ROUND);
----

The lower-right Arc is positioned based on the overall height of the Stage.  The 20 subtracted from the height is the 10 pixel Insets from the VBox (10 for left + 10 for right).

[source,java]
----
Arc medArc = new Arc(568-20, 320-20, 60, 60, 90, 90);
medArc.setType(ArcType.ROUND);

primaryStage.setWidth( 568 );
primaryStage.setHeight( 320 );
----

=== The Hyperlink

The Hyperlink is positioned offset the center (284,160) which is the width and height of the Stage both divided by two.  This positions the text of the Hyperlink in the lower-right quadrant of the screen, so an offset is needed based on the Hyperlink width and height.  The dimensions are not available for the Hyperlink until the screen is shown, so I make a post-shown adjustment to the position.

[source,java]
----
Hyperlink hyperlink = new Hyperlink("About this App");

primaryStage.setOnShown( (evt) -> {
     hyperlink.setLayoutX( 284 - (hyperlink.getWidth()/3) );
     hyperlink.setLayoutY( 160 - hyperlink.getHeight() );
});
----

The Hyperlink is not placed in the true center of the screen.  The layoutX value is based on a divide-by-three operation that moves it away from the upper-left design.

=== Z-Order

As mentioned earlier, Pane supports overlapping children.  This picture shows the About View with depth added to the upper-left design.  The smaller Arcs and Circle hover over backgroundArc as does largeArc.

image::images/layout/paneapp_zorder.png[title="About View Showing Depth"]

The z-order in this example is determined by the order in which the children are added to the Pane.  backgroundArc is obscured by items added later, most notably largeArc.  To rearrange the children, use the toFront() and toBack() methods after the items have been added to the Pane.

[source,java]
----
p.getChildren().addAll( backgroundArc, largeArc, smArc1, smCircle, smArc2, hyperlink, medArc );

vbox.getChildren().add( p );
----

When starting JavaFX, it is tempting to build an absolute layout.  Be aware that absolute layouts are brittle, often breaking when the screen is resized or when items are added during the software maintenance phase.  Yet, there are good reasons for using absolute positioning.  Gaming is one such usage.  In a game, you can adjust the (x,y) coordinate of a Shape to move a game piece around the screen.  This article demonstrated the JavaFX class Pane which provides absolute positioning to any shape-driven UI.


=== Completed Code

This is the completed JavaFX Application subclass and main.

[source,java]
----
public class PaneApp extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {

        VBox vbox = new VBox();
        vbox.setPadding( new Insets( 10 ) );
        vbox.setBackground( 
            new Background(
                new BackgroundFill(Color.BLACK, new CornerRadii(0), new Insets(0))
                ));

        Pane p = new Pane();

        Arc largeArc = new Arc(0, 0, 100, 100, 270, 90);
        largeArc.setFill(Color.web("0x59291E"));
        largeArc.setType(ArcType.ROUND);

        Arc backgroundArc = new Arc(0, 0, 160, 160, 270, 90 );
        backgroundArc.setFill( Color.web("0xD96F32") );
        backgroundArc.setType( ArcType.ROUND );

        Arc smArc1 = new Arc( 0, 160, 30, 30, 270, 180);
        smArc1.setFill(Color.web("0xF2A444"));
        smArc1.setType(ArcType.ROUND);

        Circle smCircle = new Circle(
            160/Math.sqrt(2.0), 160/Math.sqrt(2.0), 30,Color.web("0xF2A444")
            );

        Arc smArc2 = new Arc( 160, 0, 30, 30, 180, 180);
        smArc2.setFill(Color.web("0xF2A444"));
        smArc2.setType(ArcType.ROUND);

        Hyperlink hyperlink = new Hyperlink("About this App");
        hyperlink.setFont( Font.font(36) );
        hyperlink.setTextFill( Color.web("0x3E6C93") );
        hyperlink.setBorder( Border.EMPTY );

        Arc medArc = new Arc(568-20, 320-20, 60, 60, 90, 90);
        medArc.setFill(Color.web("0xD9583B"));
        medArc.setType(ArcType.ROUND);

        p.getChildren().addAll( backgroundArc, largeArc, smArc1, smCircle, 
            smArc2, hyperlink, medArc );

        vbox.getChildren().add( p );

        Scene scene = new Scene(vbox);
        scene.setFill(Color.BLACK);

        primaryStage.setTitle("Pane App");
        primaryStage.setScene( scene );
        primaryStage.setWidth( 568 );
        primaryStage.setHeight( 320 );
        primaryStage.setOnShown( (evt) -> {
             hyperlink.setLayoutX( 284 - (hyperlink.getWidth()/3) );
             hyperlink.setLayoutY( 160 - hyperlink.getHeight() );
        });
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
----
