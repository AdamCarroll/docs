= Application Structure

== The MVVM Pattern
Author: Carl Walker

Model-View-ViewModel (MVVM) is a software architecture that separates UI controls (the View) from data access and business logic (the Model).  The separation helps larger applications during the maintenance phase.  With MVVM, View changes -- especially those that are purely cosmetic -- can be made without fear of introducing side effects.   Changes to the Model (usually less volatile than the View) can be applied more easily throughout the application because MVVM promotes reuse.

In between the View and the Model is the ViewModel.  The ViewModel mediates between the View and the Model, yet contains no references to the View.  This emables ViewModel sharing which is useful when two Views show similar data.

This article presents a simplified MVVM example.  An Employment Request Form submits several data elements to a back-end service.  This screenshot shows the application with the name, position, and annual salary data elements set.

image::images/app-structure/mvvmapp_screenshot.png[title="Employment Request Form"]

After entering the data and pressing Save, the Model object responds with a println().

[source,shell]
----
saving EmploymentRequest{name='Carl', position='Pizza Dough Thrower', annualSalary=30000.0}
----

If the Reset button is pressed after filling in the TextFields, the form is restored to its original values: empty name and position and an annualSalary of 0.

The Cancel button ends the application.

=== Structure

A simplified MVVM application is composed of the following types of classes

App::
	Main entry point
View::
	UI controls
Model::
	Function call to business logic and data access
ViewModel::
	Mediator between View and Model
Domain object::
	UI-neutral transfer object
Converter::
	Helper class for ViewModel to Model communication

This UML shows the structure of the Employment Request Form.  The View class is EmploymentRequestView which contains the UI control objects like the Name `TextField`.  The ViewModel class is EmploymentRequestViewModel and contains JavaFX properties.  The Model class is EmploymentRequestModel with a single method for persisting the form.  EmploymentRequestConverter is a helper class.  EmploymentRequest is a POJO containing data fields.  MVVMApp is the main entry point, a JavaFX Application subclass.

image::images/app-structure/mvvmapp_uml.png[title="UML Class Model of Application"]

=== View

In MVVM, the View class is responsible for the UI controls and nothing else.  Event handlers attached to UI controls delegate immediately to the ViewModel.  JavaFX data binding updates the UI with Model changes.  In the Employment Request Form, three TextFields gather input from the user: tfName, tfPosition, tfAnnualSalary.  Three Buttons initiate operations on the application: btnSave, btnCancel, btnReset.  This is the beginning of the EmploymentRequestView class.

[source,java]
----
public class EmploymentRequestView extends VBox {

    private GridPane gp = new GridPane();

    private TextField tfName = new TextField();
    private TextField tfPosition = new TextField();
    private TextField tfAnnualSalary = new TextField();

    private Button btnSave = new Button("Save");
    private Button btnCancel = new Button("Cancel");
    private Button btnReset = new Button("Reset");

    public EmploymentRequestView() {
        createView();
        bindViewModel();
    }
----

The View knows about the ViewModel and uses JavaFX binding to synchronize the UI with the ViewModel.  This demo treats the ViewModel as a prototype object, created when the View object is created.  Alternatively, the ViewModel can be a singleton or provided by CDI.  Each UI field is bound bi-directionally to the ViewModel.  As the UI changes -- say through entering a value in tfName -- the corresponding field in the ViewModel is updated.  The more complicated expression for the tfAnnualSalary field is needed to convert the String-based `TextField` into a DoubleProperty.

[source,java]
----
    private final EmploymentRequestViewModel viewModel =
            new EmploymentRequestViewModel();

    private void bindViewModel() {

        tfName.textProperty().bindBidirectional(viewModel.nameProperty());

        tfPosition.textProperty().bindBidirectional(viewModel.positionProperty());

        Bindings.bindBidirectional(
                tfAnnualSalary.textProperty(),
                viewModel.annualSalaryProperty(),
                new NumberStringConverter()
        );
    }
----

The UI in this demo is built in code.  The following createView() method handles the layout of the form and puts the core controls (such as tfName and btnSave) in containers.

[source,java]
----
    private void createView() {
        VBox gpwrap = new VBox();
        gpwrap.setAlignment( Pos.CENTER );

        gp.setPadding( new Insets(40) );
        gp.setVgap( 4 );
        gp.add(new Label("Name"), 0, 0);                  gp.add(tfName, 1, 0);
        gp.add(new Label("Desired Position"), 0, 1);      gp.add(tfPosition, 1, 1);
        gp.add(new Label("Current Annual Salary"), 0, 2); gp.add(tfAnnualSalary, 1, 2);

        final ColumnConstraints col = new ColumnConstraints();
        col.setPercentWidth( 50 );

        gp.getColumnConstraints().addAll( col, col );

        gpwrap.getChildren().add( gp );

        VBox.setVgrow( gpwrap, Priority.ALWAYS );

        btnSave.setOnAction( this::save );
        btnCancel.setOnAction( this::cancel );
        btnReset.setOnAction( this::reset );

        btnSave.setDefaultButton(true);

        ButtonBar buttonBar = new ButtonBar();
        buttonBar.setPadding( new Insets(20.0d) );
        ButtonBar.setButtonData(btnSave, ButtonBar.ButtonData.OK_DONE);
        ButtonBar.setButtonData(btnCancel, ButtonBar.ButtonData.CANCEL_CLOSE);
        ButtonBar.setButtonData(btnReset, ButtonBar.ButtonData.OTHER);

        buttonBar.getButtons().addAll( btnSave, btnCancel, btnReset );

        this.getChildren().addAll(
                gpwrap,
                new Separator(),
                buttonBar);
    }
----

The class ends with handlers for the Buttons.  These handlers delegate their actions to the ViewModel.

[source,java]
----
    private void save(ActionEvent evt) { viewModel.save(); }

    private void cancel(ActionEvent evt) {
        Platform.exit();
    }

    private void reset(ActionEvent evt) { viewModel.reset(); }
}
----

==== FXML and Scene Builder

In this example, the UI is built in code.  Scene Builder is a design-oriented alternative that can be more productive.  To convert this example to FXML, the product of Scene Builder, you would build the UI in the tool and annotate the fields and methods of the EmploymentRequestView class with @FXML.  See the following screenshot for how the demo looks in Scene Builder.  This is informational only and not part of the working demo.

image::images/app-structure/mvvmapp_sb.png[title="Scene Builder Could Also Implement the View"]

Notice that the right "half" of the UML diagram would not be changed by switching the View implementation from code to Scene Builder.  A sign of a good design is when alternative presentations can be supported easily.

=== ViewModel

The ViewModel is a layer that interacts with both the View and the Model.  In this simple presentation, the value of such a layer is limited; one could just unpack the TextFields into the Model in the `Button` handler.  As the UI becomes more complex, it is useful to have a plainer, more business-oriented object to work with.  While there is a one-to-one correspondence between View, Model, and ViewModel, that may not always be the case.  

Handling a many-to-many relationship is key for the ViewModel.  There may be many Views that working with the same Model element.  Multiple models may contribute to a single View.

This ViewModel looks like the domain object that will be presented later with one key difference: JavaFX Binding.  EmploymentRequestViewModel was bound to the EmploymentRequestView UI controls and the methods of EmploymentRequestViewModel will have access to all of the information within the save() method.  No extra marshaling of arguments is needed.

[source,java]
----
public class EmploymentRequestViewModel {

    private final StringProperty name = new SimpleStringProperty("");
    private final StringProperty position = new SimpleStringProperty("");
    private final DoubleProperty annualSalary = new SimpleDoubleProperty();

    private final EmploymentRequestConverter converter =
            new EmploymentRequestConverter();

    private final EmploymentRequestModel model = new EmploymentRequestModel();

    public String getName() {
        return name.get();
    }

    public StringProperty nameProperty() {
        return name;
    }

    public void setName(String name) {
        this.name.set(name);
    }

    public String getPosition() {
        return position.get();
    }

    public StringProperty positionProperty() {
        return position;
    }

    public void setPosition(String position) {
        this.position.set(position);
    }

    public double getAnnualSalary() {
        return annualSalary.get();
    }

    public DoubleProperty annualSalaryProperty() {
        return annualSalary;
    }

    public void setAnnualSalary(double annualSalary) {
        this.annualSalary.set(annualSalary);
    }

    public void save() {
        EmploymentRequest data = converter.toEmploymentRequest( this );
        model.save( data );
    }

    public void reset() {
        this.name.set("");
        this.position.set("");
        this.annualSalary.set(0.0d);
    }
}
----

Both the Converter and the Model have been added to this ViewModel as prototypes, meaning that they were created when the ViewModel was created.

==== Converter

The Converter is a class the translates between ViewModel and domain object.  In this app, there is a single toEmploymentRequest() method that creates an object from the ViewModel fields.

[source,java]
----
public class EmploymentRequestConverter {

    public EmploymentRequest toEmploymentRequest(EmploymentRequestViewModel viewModel) {
        return new EmploymentRequest(
                viewModel.getName(),
                viewModel.getPosition(),
                viewModel.getAnnualSalary()
        );
    }
}
----

=== Model

Finally, the Model persists the information.  This Model example has a single mocked method which will verify that it receives the correct data for the save() operation.

[source,java]
----
public class EmploymentRequestModel {

    public void save(EmploymentRequest req) {
        System.out.println("saving " + req);
    }
}
----

This is the plain Java object used to transport data from the Model to the UI.

[source,java]
----
public class EmploymentRequest {

    private final String name;
    private final String position;
    private final Double annualSalary;

    public EmploymentRequest(String name,
                             String position,
                             Double annualSalary) {
        this.name = name;
        this.position = position;
        this.annualSalary = annualSalary;
    }

    public String getName() {
        return name;
    }

    public String getPosition() {
        return position;
    }

    public Double getAnnualSalary() {
        return annualSalary;
    }

    @Override
    public String toString() {
        return "EmploymentRequest{" +
                "name='" + name + '\'' +
                ", position='" + position + '\'' +
                ", annualSalary=" + annualSalary +
                '}';
    }
}
----

JavaFX provides developers with a powerful toolkit to build applications.  However, a design is still needed for an effective program.  MVVM is an architectural pattern that separates pure UI classes called Views from pure data classes called Models.  In the middle sits the ViewModel which relies heavily on the data binding in JavaFX.

=== Further Work

Sometimes, the View needs to know of a Model change.  Because MVVM dictates a one-way control flow -- View to ViewModel to Model and not the reverse -- a different mechanism than data binding is needed to make the ViewModel aware of Model changes.  A publishing / subscribing library can be used for this requirement which would broker the Model/ViewModel interaction.  ViewModel would receive a notification from the Model and the Model would not require a reference to the ViewModel object.

To read more about MVVM and JavaFX, check out the mvvmFX project.  The examples in that project provided the basis for this demonstration.

https://github.com/sialcasa/mvvmFX[mvvmFX]

=== Completed Code

The completed code in this example is available as a Gradle project here.

https://courses.bekwam.net/public_tutorials/source/bkcourse_mvvmapp_sources.zip[bkcourse_mvvmapp_sources.zip]

