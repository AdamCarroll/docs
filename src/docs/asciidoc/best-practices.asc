= Best Practices

Placeholder whilst things get built...

. Styleable Properties

== Styleable Properties
Author: Gerrit Grunwald

[source,java]
----
/* Member variables for StyleablePropertyFactory
 * and StyleableProperty
 */
private static final StyleablePropertyFactory<MY_CTRL> FACTORY = 
    new StyleablePropertyFactory<>(Control.getClassCssMetaData());

private static final CssMetaData<MY_CTRL, Color> COLOR = 
    FACTORY.createColorCssMetaData("-color", s -> s.color, Color.RED, false);â€¨
private final StyleableProperty<Color> color = new SimpleStyleableObjectProperty<>(COLOR, this, "color");


// Getter, Setter and Property method
public Color getColor() { 
    return this.color.getValue(); 
}

public void setColor(final Color color) { 
    this.color.setValue(COLOR);
}

public ObjectProperty<Color> colorProperty() {
    return (ObjectProperty<Color>) this.color; 
}


// Return CSS Metadata
public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() { 
    return FACTORY.getCssMetaData(); 
}

@Override public List<CssMetaData<? extends Styleable, ?>> getControlCssMetaData() { 
    return getClassCssMetaData(); 
}
----
    
== Tasks
Author: Carl Walker

This article demonstrates how to use a JavaFX Task to keep the UI responsive.  It is imperative that any operation taking more than a few hundred milliseconds be executed on a separate Thread to avoid locking up the UI.  A Task wraps up the sequence of steps in a long-running operation and provides callbacks for the possible outcomes.

The *Task* class also keeps the user aware of the operation through properties which can be bound to UI controls like ProgressBars and Labels.  The binding dynamically updates the UI.  These properties include

. *runningProperty* - Whether or not the Task is running
. *progressProperty* - The percent complete of an operation
. *messageProperty* - Text describing a step in the operation

=== Demonstration

The following screenshots show the operation of an HTML retrieval application.

Entering a URL and pressing "Go" will start a JavaFX Task.  When running, the Task will make an HBox visible that contains a ProgressBar and a Label.  The ProgressBar and Label are updated throughout the operation.

image::images/best-practices/tasks_pb.png[title="Screenshot of App Showing ProgressBar and Label"]

When the retrieval is finished, a succeeded() callback is invoked and the UI is updated.  Note that the succeeded() callback takes place on the FX Thread, so it is safe to manipuplate controls.

image::images/best-practices/tasks_contents.png[title="Screenshot of App Showing Successful Retrieval"]

If there was an error retrieving the HTML, a failed() callback is invoked and an error Alert is shown.  failed() also takes place on the FX Thread.  This screenshot shows invalid input. An "h" is used in the URL instead of the correct "http".

image::images/best-practices/tasks_error.png[title="Screenshot of App Showing Failure"]

=== Code

An event handler is placed on the Get HTML Button which creates the Task.  The entry point of the Task is the call() method which starts by calling updateMessage() and updateProgress().  These methods are executed on the FX Thread and will result in updates to any bound properties.

The program proceeds by issuing an HTTP GET using standard java.net classes.  A String "retval" is built up from the retrieved characters.  The message and progress properties are updated with more calls to updateMessage() and updateProgress().  The call() method ends with a return of the String containing the HTML text.

On a successful operation, the succeeded() callback is invoked.  getValue() is a Task method that will return the value accrued in the Task (recall "retval").  The type of the value is what is provided in the generic argument, in this case "String".  This could be a complex type like a domain object or a Collection.  The succeeded() operation runs on the FX Thread, so the getValue() String is directly set on the TextArea.

If the operation failed, an Exception is thrown.  The Exception is caught by the Task and converted to a failed() call.  failed() is also FX Thread-safe and it displays an Alert.

[source,java]
----
String url = tfURL.getText();

Task<String> task = new Task<String>() {

    @Override
    protected String call() throws Exception {

        updateMessage("Getting HTML from " + url );
        updateProgress( 0.5d, 1.0d );

        HttpURLConnection c = null;
        InputStream is = null;
        String retval = "";

        try {

            c = (HttpURLConnection) new URL(url).openConnection();

            updateProgress( 0.6d, 1.0d );
            is = c.getInputStream();
            int ch;
            while( (ch=is.read()) != -1 ) {
                retval += (char)ch;
            }

        } finally {
            if( is != null ) {
                is.close();
            }
            if( c != null ) {
                c.disconnect();
            }
        }

        updateMessage("HTML retrieved");
        updateProgress( 1.0d, 1.0d );

        return retval;
    }

    @Override
    protected void succeeded() {
        contents.setText( getValue() );
    }

    @Override
    protected void failed() {
        Alert alert = new Alert(Alert.AlertType.ERROR, getException().getMessage() );
        alert.showAndWait();
    }
};
----

Notice that the Task does not update the ProgressBar and status Label directly.  Instead, the Task makes safe calls to updateMessage() and updateProgress().  To update the UI, JavaFX binding is used in the following statements.

[source,java]
----
bottomControls.visibleProperty().bind( task.runningProperty() );
pb.progressProperty().bind( task.progressProperty() );
messageLabel.textProperty().bind( task.messageProperty() );
----

Task.runningProperty is a boolean that can be bound to the bottomControls HBox visibleProperty.  Task.progressProperty is a double that can be bound to the ProgressBar progressProperty.  Task.messageProperty is a String that can be bound to the status Label textProperty.

To run the Task, create a Thread providing the Task as a constructor argument and invoke start().

[source,java]
----
new Thread(task).start();
----

For any long-running operation -- File IO, the Network -- use a JavaFX Task to keep your application responsive.  The JavaFX Task gives your application a consistent way of handling asynchronous operations and exposes several properties that can be used to eliminate boilerplate and programming logic.

=== Complete Code

The code can be tested in a single .java file.

[source,java]
----
public class ProgressBarApp extends Application {

    private HBox bottomControls;
    private ProgressBar pb;
    private Label messageLabel;

    private TextField tfURL;

    private TextArea contents;

    @Override
    public void start(Stage primaryStage) throws Exception {

        Parent p = createMainView();

        Scene scene = new Scene(p);

        primaryStage.setTitle("ProgressBarApp");
        primaryStage.setWidth( 667 );
        primaryStage.setHeight( 376 );
        primaryStage.setScene( scene );
        primaryStage.show();
    }

    private Parent createMainView() {

        VBox vbox = new VBox();
        vbox.setPadding( new Insets(10) );
        vbox.setSpacing( 10 );

        HBox topControls = new HBox();
        topControls.setAlignment(Pos.CENTER_LEFT);
        topControls.setSpacing( 4 );

        Label label = new Label("URL");
        tfURL = new TextField();
        HBox.setHgrow( tfURL, Priority.ALWAYS );
        Button btnGetHTML = new Button("Get HTML");
        btnGetHTML.setOnAction( this::getHTML );
        topControls.getChildren().addAll(label, tfURL, btnGetHTML);

        contents = new TextArea();
        VBox.setVgrow( contents, Priority.ALWAYS );

        bottomControls = new HBox();
        bottomControls.setVisible(false);
        bottomControls.setSpacing( 4 );
        HBox.setMargin( bottomControls, new Insets(4));

        pb = new ProgressBar();
        messageLabel = new Label("");
        bottomControls.getChildren().addAll(pb, messageLabel);

        vbox.getChildren().addAll(topControls, contents, bottomControls);

        return vbox;
    }

    public void getHTML(ActionEvent evt) {

        String url = tfURL.getText();

        Task<String> task = new Task<String>() {

            @Override
            protected String call() throws Exception {

                updateMessage("Getting HTML from " + url );
                updateProgress( 0.5d, 1.0d );

                HttpURLConnection c = null;
                InputStream is = null;
                String retval = "";

                try {

                    c = (HttpURLConnection) new URL(url).openConnection();

                    updateProgress( 0.6d, 1.0d );
                    is = c.getInputStream();
                    int ch;
                    while( (ch=is.read()) != -1 ) {
                        retval += (char)ch;
                    }

                } finally {
                    if( is != null ) {
                        is.close();
                    }
                    if( c != null ) {
                        c.disconnect();
                    }
                }

                updateMessage("HTML retrieved");
                updateProgress( 1.0d, 1.0d );

                return retval;
            }

            @Override
            protected void succeeded() {
                contents.setText( getValue() );
            }

            @Override
            protected void failed() {
                Alert alert = new Alert(Alert.AlertType.ERROR, getException().getMessage() );
                alert.showAndWait();
            }
        };

        bottomControls.visibleProperty().bind( task.runningProperty() );
        pb.progressProperty().bind( task.progressProperty() );
        messageLabel.textProperty().bind( task.messageProperty() );

        new Thread(task).start();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
----

== Avoid Nulls in ComboBoxes
Author: Carl Walker

To use a `ComboBox` in JavaFX, declare a List of items and set an initial value using setValue().  The `ComboBox` method getValue() retrieves the currently selected value.  If an initial value is not provided, the control defaults to a null value.

The null value is a problem when the `ComboBox` drives other logic like an upper-case transformation or the lookup of a database record.  While a null check is usually used to prevent this type of error, an empty object is preferred in order to simplify the code.  ComboBoxes often appear in clusters and the empty object technique reduces null checks in the interaction of related ComboBoxes and on save and load operations.

This article presents a pair of related ComboBoxes.  A country selection in one `ComboBox` modifies the list of available city items in a second `ComboBox`.  Neither selection is required.  The user can press the Save `Button` at any time and if no selection is made for either `ComboBox`, an empty object -- in this case an empty String -- will be returned.

This is a screenshot of the app.  Selecting "Switzerland" from an empty initial value will fill the city `ComboBox` with Swiss cities.  Selecting the city "Zurich" and pressing Save will retrieve those values.

image::images/best-practices/nonullcombo_screenshot.png[title="Related ComboBoxes"]

=== Data Structure

The data structures supporting the app are a List of countries and a Map of cities.  The Map of cities uses country as a key.

[source,java]
.NoNullComboApp.class
----
public class NoNullComboApp extends Application {

    private List<String> countries = new ArrayList<>();

    private Map<String, List<String>> citiesMap = new LinkedHashMap<>();

    private void initData() {

        String COUNTRY_FR = "France";
        String COUNTRY_DE = "Germany";
        String COUNTRY_CH = "Switzerland";

        countries.add(COUNTRY_FR); countries.add(COUNTRY_DE); countries.add(COUNTRY_CH);

        List<String> frenchCities = new ArrayList<>();
        frenchCities.add("Paris");
        frenchCities.add("Strasbourg");

        List<String> germanCities = new ArrayList<>();
        germanCities.add("Berlin");
        germanCities.add("Cologne");
        germanCities.add("Munich");

        List<String> swissCities = new ArrayList<>();
        swissCities.add("Zurich");

        citiesMap.put(COUNTRY_FR, frenchCities );
        citiesMap.put(COUNTRY_DE, germanCities );
        citiesMap.put(COUNTRY_CH, swissCities );
    }
----

To retrieve the set of cities for a given country, use the get() method of the Map.  The containsKey() method can be used to determine whether or not the Map contains a value for the specified country.  In this example, containsKey() will be used to handle the empty object case.

=== UI

The UI is a pair of ComboBoxes with Labels and a Save Button.  The controls are put in a `VBox` and left-justified.  The `VBox` is wrapped in a `TilePane` and centered.  The `TilePane` was used since it does not stretch the `VBox` horizontally.

[source,java]
.NoNullComboApp.class
----
    @Override
    public void start(Stage primaryStage) throws Exception {

        Label countryLabel = new Label("Country:");
        country.setPrefWidth(200.0d);
        Label cityLabel = new Label("City:");
        city.setPrefWidth(200.0d);
        Button saveButton = new Button("Save");

        VBox vbox = new VBox(
                countryLabel,
                country,
                cityLabel,
                city,
                saveButton
        );
        vbox.setAlignment(Pos.CENTER_LEFT );
        vbox.setSpacing( 10.0d );

        TilePane outerBox = new TilePane(vbox);
        outerBox.setAlignment(Pos.CENTER);

        Scene scene = new Scene(outerBox);

        initData();
----

=== Initial Values

As mentioned earlier, if a value is not specified for a `ComboBox`, then null will be returned in a getValue() call.  Although there are several defensive techniques -- if checks, Commons StringUtils methods -- for fending off NullPointerExceptions, it is better to avoid them completely.  This is especially true as the interactions become complex or there are several ComboBoxes that allow empty selections.

[source,java]
.NoNullComboApp.class
----
        country.getItems().add("");
        country.getItems().addAll( countries );
        country.setValue( "" );  // empty selection is object and not null

        city.getItems().add("");
        city.setValue( "" );
----

In this app, the Country `ComboBox` will not  be changed, so its items are added in the start() method.  Country starts with an initial empty selection as does city.  City -- at this point -- contains a single empty item.

=== Interaction

When the country value is changed, the contents of the city `ComboBox` should be replaced.  It is common to use clear() on the backing list; however, this will produce a null value in the `ComboBox` (no items, no value).  Instead, use removeIf() with a clause to keep a single empty item.  With the list cleared of all data (except the empty item), the newly-selected contents can be added with addAll().

[source,java]
.NoNullComboApp.class
----
        country.setOnAction( (evt) -> {

            String cty = country.getValue();

            city.getItems().removeIf( (c) -> !c.isEmpty() );

            if( citiesMap.containsKey(cty) ) {  // not an empty key
                city.getItems().addAll( citiesMap.get(cty) );
            }
        });

        saveButton.setOnAction( (evt) -> {
           System.out.println("saving country='" + country.getValue() +
                                      "', city='" + city.getValue() + "'");
        });
----

The Save Button action will print out the values.  In no case will a null value be returned from getValue().

If you're a Java developer, you've written "if not null" thousands of times.  Yet, project after project, I see NullPointerExceptions highlighting cases that were missed or new conditions that have arisen.  This article presented a technique for keeping empty objects in ComboBoxes by setting an initial value and using removeIf() rather than clear() when changing lists.  Although, this example used String objects, this can be expanded to work with domain objects that have an hashCode/equals implementation, an empty object representation, and a cellFactory or toString() to produce an empty view.

=== Complete Code

The code can be tested in a single .java file.

[source,java]
.NoNullComboApp.class
----
public class NoNullComboApp extends Application {

    private final ComboBox<String> country = new ComboBox<>();
    private final ComboBox<String> city = new ComboBox<>();

    private List<String> countries = new ArrayList<>();

    private Map<String, List<String>> citiesMap = new LinkedHashMap<>();

    @Override
    public void start(Stage primaryStage) throws Exception {

        Label countryLabel = new Label("Country:");
        country.setPrefWidth(200.0d);
        Label cityLabel = new Label("City:");
        city.setPrefWidth(200.0d);
        Button saveButton = new Button("Save");

        VBox vbox = new VBox(
                countryLabel,
                country,
                cityLabel,
                city,
                saveButton
        );
        vbox.setAlignment(Pos.CENTER_LEFT );
        vbox.setSpacing( 10.0d );

        TilePane outerBox = new TilePane(vbox);
        outerBox.setAlignment(Pos.CENTER);

        Scene scene = new Scene(outerBox);

        initData();

        country.getItems().add("");
        country.getItems().addAll( countries );
        country.setValue( "" );  // empty selection is object and not null

        city.getItems().add("");
        city.setValue( "" );

        country.setOnAction( (evt) -> {

            String cty = country.getValue();

            city.getItems().removeIf( (c) -> !c.isEmpty() );

            if( citiesMap.containsKey(cty) ) {  // not an empty key
                city.getItems().addAll( citiesMap.get(cty) );
            }
        });

        saveButton.setOnAction( (evt) -> {
           System.out.println("saving country='" + country.getValue() +
                                      "', city='" + city.getValue() + "'");
        });

        primaryStage.setTitle("NoNullComboApp");
        primaryStage.setScene( scene );
        primaryStage.setWidth( 320 );
        primaryStage.setHeight( 480 );
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    private void initData() {

        String COUNTRY_FR = "France";
        String COUNTRY_DE = "Germany";
        String COUNTRY_CH = "Switzerland";

        countries.add(COUNTRY_FR); countries.add(COUNTRY_DE); countries.add(COUNTRY_CH);

        List<String> frenchCities = new ArrayList<>();
        frenchCities.add("Paris");
        frenchCities.add("Strasbourg");

        List<String> germanCities = new ArrayList<>();
        germanCities.add("Berlin");
        germanCities.add("Cologne");
        germanCities.add("Munich");

        List<String> swissCities = new ArrayList<>();
        swissCities.add("Zurich");

        citiesMap.put(COUNTRY_FR, frenchCities );
        citiesMap.put(COUNTRY_DE, germanCities );
        citiesMap.put(COUNTRY_CH, swissCities );
    }
}
----

