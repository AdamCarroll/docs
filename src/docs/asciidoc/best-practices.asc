= Best Practices

Placeholder whilst things get built...

. Styleable Properties



== 1. Styleable Properties
Author: Gerrit Grunwald

[source,java]
----
/* Member variables for StyleablePropertyFactory
 * and StyleableProperty
 */
private static final StyleablePropertyFactory<MY_CTRL> FACTORY = 
    new StyleablePropertyFactory<>(Control.getClassCssMetaData());

private static final CssMetaData<MY_CTRL, Color> COLOR = 
    FACTORY.createColorCssMetaData("-color", s -> s.color, Color.RED, false);â€¨
private final StyleableProperty<Color> color = new SimpleStyleableObjectProperty<>(COLOR, this, "color");


// Getter, Setter and Property method
public Color getColor() { 
    return this.color.getValue(); 
}

public void setColor(final Color color) { 
    this.color.setValue(COLOR);
}

public ObjectProperty<Color> colorProperty() {
    return (ObjectProperty<Color>) this.color; 
}


// Return CSS Metadata
public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() { 
    return FACTORY.getCssMetaData(); 
}

@Override public List<CssMetaData<? extends Styleable, ?>> getControlCssMetaData() { 
    return getClassCssMetaData(); 
}
----

== 2. Tasks
Author: Carl Walker

This article demonstrates how to use a JavaFX Task to keep the UI responsive.  It is imperative that any operation taking more than a few hundred milliseconds be executed on a separate Thread to avoid locking up the UI.  A Task wraps up the sequence of steps in a long-running operation and provides callbacks for the possible outcomes.

The *Task* class also keeps the user aware of the operation through properties which can be bound to UI controls like ProgressBars and Labels.  The binding dynamically updates the UI.  These properties include

. *runningProperty* - Whether or not the Task is running
. *progressProperty* - The percent complete of an operation
. *messageProperty* - Text describing a step in the operation

== Demonstration

The following screenshots show the operation of an HTML retrieval application.

Entering a URL and pressing "Go" will start a JavaFX Task.  When running, the Task will make an HBox visible that contains a ProgressBar and a Label.  The ProgressBar and Label are updated throughout the operation.

image::images/best-practices/tasks_pb.png[title="Screenshot of App Showing ProgressBar and Label"]

When the retrieval is finished, a succeeded() callback is invoked and the UI is updated.  Note that the succeeded() callback takes place on the FX Thread, so it is safe to manipuplate controls.

image::images/best-practices/tasks_contents.png[title="Screenshot of App Showing Successful Retrieval"]

If there was an error retrieving the HTML, a failed() callback is invoked and an error Alert is shown.  failed() also takes place on the FX Thread.  This screenshot shows invalid input. An "h" is used in the URL instead of the correct "http".

image::images/best-practices/tasks_error.png[title="Screenshot of App Showing Failure"]

== Code

An event handler is placed on the Get HTML Button which creates the Task.  The entry point of the Task is the call() method which starts by calling updateMessage() and updateProgress().  These methods are executed on the FX Thread and will result in updates to any bound properties.

The program proceeds by issuing an HTTP GET using standard java.net classes.  A String "retval" is built up from the retrieved characters.  The message and progress properties are updated with more calls to updateMessage() and updateProgress().  The call() method ends with a return of the String containing the HTML text.

On a successful operation, the succeeded() callback is invoked.  getValue() is a Task method that will return the value accrued in the Task (recall "retval").  The type of the value is what is provided in the generic argument, in this case "String".  This could be a complex type like a domain object or a Collection.  The succeeded() operation runs on the FX Thread, so the getValue() String is directly set on the TextArea.

If the operation failed, an Exception is thrown.  The Exception is caught by the Task and converted to a failed() call.  failed() is also FX Thread-safe and it displays an Alert.

[source,java]
----
String url = tfURL.getText();

Task<String> task = new Task<String>() {

    @Override
    protected String call() throws Exception {

        updateMessage("Getting HTML from " + url );
        updateProgress( 0.5d, 1.0d );

        HttpURLConnection c = null;
        InputStream is = null;
        String retval = "";

        try {

            c = (HttpURLConnection) new URL(url).openConnection();

            updateProgress( 0.6d, 1.0d );
            is = c.getInputStream();
            int ch;
            while( (ch=is.read()) != -1 ) {
                retval += (char)ch;
            }

        } finally {
            if( is != null ) {
                is.close();
            }
            if( c != null ) {
                c.disconnect();
            }
        }

        updateMessage("HTML retrieved");
        updateProgress( 1.0d, 1.0d );

        return retval;
    }

    @Override
    protected void succeeded() {
        contents.setText( getValue() );
    }

    @Override
    protected void failed() {
        Alert alert = new Alert(Alert.AlertType.ERROR, getException().getMessage() );
        alert.showAndWait();
    }
};
----

Notice that the Task does not update the ProgressBar and status Label directly.  Instead, the Task makes safe calls to updateMessage() and updateProgress().  To update the UI, JavaFX binding is used in the following statements.

[source,java]
----
bottomControls.visibleProperty().bind( task.runningProperty() );
pb.progressProperty().bind( task.progressProperty() );
messageLabel.textProperty().bind( task.messageProperty() );
----

Task.runningProperty is a boolean that can be bound to the bottomControls HBox visibleProperty.  Task.progressProperty is a double that can be bound to the ProgressBar progressProperty.  Task.messageProperty is a String that can be bound to the status Label textProperty.

To run the Task, create a Thread providing the Task as a constructor argument and invoke start().

[source,java]
----
new Thread(task).start();
----

For any long-running operation -- File IO, the Network -- use a JavaFX Task to keep your application responsive.  The JavaFX Task gives your application a consistent way of handling asynchronous operations and exposes several properties that can be used to eliminate boilerplate and programming logic.

== Complete Code

The code can be tested in a single .java file.

[source,java]
----
public class ProgressBarApp extends Application {

    private HBox bottomControls;
    private ProgressBar pb;
    private Label messageLabel;

    private TextField tfURL;

    private TextArea contents;

    @Override
    public void start(Stage primaryStage) throws Exception {

        Parent p = createMainView();

        Scene scene = new Scene(p);

        primaryStage.setTitle("ProgressBarApp");
        primaryStage.setWidth( 667 );
        primaryStage.setHeight( 376 );
        primaryStage.setScene( scene );
        primaryStage.show();
    }

    private Parent createMainView() {

        VBox vbox = new VBox();
        vbox.setPadding( new Insets(10) );
        vbox.setSpacing( 10 );

        HBox topControls = new HBox();
        topControls.setAlignment(Pos.CENTER_LEFT);
        topControls.setSpacing( 4 );

        Label label = new Label("URL");
        tfURL = new TextField();
        HBox.setHgrow( tfURL, Priority.ALWAYS );
        Button btnGetHTML = new Button("Get HTML");
        btnGetHTML.setOnAction( this::getHTML );
        topControls.getChildren().addAll(label, tfURL, btnGetHTML);

        contents = new TextArea();
        VBox.setVgrow( contents, Priority.ALWAYS );

        bottomControls = new HBox();
        bottomControls.setVisible(false);
        bottomControls.setSpacing( 4 );
        HBox.setMargin( bottomControls, new Insets(4));

        pb = new ProgressBar();
        messageLabel = new Label("");
        bottomControls.getChildren().addAll(pb, messageLabel);

        vbox.getChildren().addAll(topControls, contents, bottomControls);

        return vbox;
    }

    public void getHTML(ActionEvent evt) {

        String url = tfURL.getText();

        Task<String> task = new Task<String>() {

            @Override
            protected String call() throws Exception {

                updateMessage("Getting HTML from " + url );
                updateProgress( 0.5d, 1.0d );

                HttpURLConnection c = null;
                InputStream is = null;
                String retval = "";

                try {

                    c = (HttpURLConnection) new URL(url).openConnection();

                    updateProgress( 0.6d, 1.0d );
                    is = c.getInputStream();
                    int ch;
                    while( (ch=is.read()) != -1 ) {
                        retval += (char)ch;
                    }

                } finally {
                    if( is != null ) {
                        is.close();
                    }
                    if( c != null ) {
                        c.disconnect();
                    }
                }

                updateMessage("HTML retrieved");
                updateProgress( 1.0d, 1.0d );

                return retval;
            }

            @Override
            protected void succeeded() {
                contents.setText( getValue() );
            }

            @Override
            protected void failed() {
                Alert alert = new Alert(Alert.AlertType.ERROR, getException().getMessage() );
                alert.showAndWait();
            }
        };

        bottomControls.visibleProperty().bind( task.runningProperty() );
        pb.progressProperty().bind( task.progressProperty() );
        messageLabel.textProperty().bind( task.messageProperty() );

        new Thread(task).start();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
----
